version: '3.8'

x-airflow-common:
  &airflow-common
  image: airflow:2.0
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKEND: 'airflow.api.auth.backend.basic_auth'
  volumes:
    - ./airflow/dags:/opt/airflow/dags
    - ./airflow/logs:/opt/airflow/logs
    - ./airflow/plugins:/opt/airflow/plugins
    - ./jobs:/opt/spark/jobs
    - ./jars:/opt/extra-jars

  user: "${AIRFLOW_UID:-50000}:${AIRFLOW_GID:-50000}"
  depends_on:
    airflow-postgres:
      condition: service_healthy
  networks:
    - lakehouse  

services:
  airflow-postgres:
    image: postgres:14
    container_name: airflow-postgres
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      retries: 5
    restart: always
    networks:
      - lakehouse
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data

  airflow-init:
    <<: *airflow-common
    container_name: airflow-init
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_UPGRADE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    command: version

  airflow-webserver:
    <<: *airflow-common
    container_name: airflow-webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 10s
      timeout: 10s
      retries: 5
    ports:
      - 8282:8080   # UI: http://localhost:8282
    restart: always
    command: webserver

  airflow-scheduler:
    <<: *airflow-common
    container_name: airflow-scheduler
    restart: always
    command: scheduler

  custom-gen:
    image: custom_gen:latest
    container_name: custom-gen
    working_dir: /app
    environment:
      MINIO_ENDPOINT: minio:9000  
      MINIO_ACCESS_KEY: admin
      MINIO_SECRET_KEY: password
      MINIO_SECURE: "false"
      MINIO_BUCKET: raw-stage
    volumes:
      - ./data_gen:/app/data_gen:ro
      - out-data:/app/data
    depends_on:
      - minio
    networks:
      - lakehouse
    restart: unless-stopped

  spark-master:
    image: spark:1.0
    container_name: spark-master
    hostname: spark-master
    environment:
      - SPARK_USER=spark
      - USER=spark
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
    ports:
      - "7077:7077" 
      - "8080:8080"   
    volumes:
      - ./config/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./config/hive-site.xml:/opt/bitnami/spark/conf/hive-site.xml
      - ./jars:/opt/extra-jars
      - ./jobs:/opt/spark/jobs
    networks:
      - lakehouse

  spark-worker-1:
    image: spark:1.0
    container_name: spark-worker-1
    hostname: spark-worker-1
    environment:
      - SPARK_USER=spark
      - USER=spark
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=1
    depends_on:
      - spark-master
    volumes:
      - ./config/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./config/hive-site.xml:/opt/bitnami/spark/conf/hive-site.xml
      - ./jars:/opt/extra-jars
      - ./jobs:/opt/spark/jobs
    networks:
      - lakehouse

  spark-worker-2:
    image: spark:1.0
    container_name: spark-worker-2
    hostname: spark-worker-2
    environment:
      - SPARK_USER=spark
      - USER=spark
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=2G
      - SPARK_WORKER_CORES=1
    depends_on:
      - spark-master
    volumes:
      - ./config/spark-defaults.conf:/opt/bitnami/spark/conf/spark-defaults.conf
      - ./config/hive-site.xml:/opt/bitnami/spark/conf/hive-site.xml
      - ./jars:/opt/extra-jars
      - ./jobs:/opt/spark/jobs
    networks:
      - lakehouse

  minio:
    image: minio/minio:latest
    container_name: minio
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
      - MINIO_DOMAIN=minio
    networks:
      lakehouse:
        aliases:
          - warehouse.minio
    ports:
      - "9000:9000"   
      - "9001:9001"   
    command: ["server", "/data", "--console-address", ":9001"]
    volumes:
      - minio_data:/data

  mc:
    depends_on:
      - minio
    image: minio/mc:latest
    container_name: mc
    networks:
      - lakehouse
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: |
      /bin/sh -c "
      until (/usr/bin/mc alias set minio http://minio:9000 admin password) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb --ignore-existing minio/warehouse;
      /usr/bin/mc policy set public minio/warehouse;
      tail -f /dev/null
      "


  metastore_db:
    image: postgres:14
    container_name: metastore_db
    environment:
      POSTGRES_USER: hive
      POSTGRES_PASSWORD: hive
      POSTGRES_DB: metastore
    networks:
      - lakehouse
    volumes:
      - metastore_db:/var/lib/postgresql/data

  hive-metastore:
    image: starburstdata/hive:3.1.2-e.18
    container_name: hive-metastore
    depends_on:
      - metastore_db
      - minio
    environment:
      HIVE_METASTORE_DRIVER: org.postgresql.Driver
      HIVE_METASTORE_JDBC_URL: jdbc:postgresql://metastore_db:5432/metastore
      HIVE_METASTORE_USER: hive
      HIVE_METASTORE_PASSWORD: hive
      HIVE_METASTORE_WAREHOUSE_DIR: s3://warehouse/
      S3_ENDPOINT: http://minio:9000
      S3_ACCESS_KEY: admin
      S3_SECRET_KEY: password
      S3_PATH_STYLE_ACCESS: "true"
      REGION: ""
      GOOGLE_CLOUD_KEY_FILE_PATH: ""
      AZURE_ADL_CLIENT_ID: ""
      AZURE_ADL_CREDENTIAL: ""
      AZURE_ADL_REFRESH_URL: ""
      AZURE_ABFS_STORAGE_ACCOUNT: ""
      AZURE_ABFS_ACCESS_KEY: ""
      AZURE_WASB_STORAGE_ACCOUNT: ""
      AZURE_ABFS_OAUTH: ""
      AZURE_ABFS_OAUTH_TOKEN_PROVIDER: ""
      AZURE_ABFS_OAUTH_CLIENT_ID: ""
      AZURE_ABFS_OAUTH_SECRET: ""
      AZURE_ABFS_OAUTH_ENDPOINT: ""
      AZURE_WASB_ACCESS_KEY: ""
      HIVE_METASTORE_USERS_IN_ADMIN_ROLE: "admin"
    ports:
      - "9083:9083"   
    networks:
      - lakehouse

  trino:
    image: trinodb/trino:457
    container_name: trino
    ports:
      - "8081:8080"  
    networks:
      - lakehouse
    volumes:
      - ./trino/etc:/etc/trino
      - ./trino/catalog:/etc/trino/catalog

networks:
  lakehouse:

volumes:
  minio_data:
  metastore_db:
  airflow_postgres_data:
  out-data: